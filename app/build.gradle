apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'


/**
 * 构建时间
 * @return
 */
static def buildTime(String time) {
    def date =new Date()
    def formattedDate = date.format(time)
    return formattedDate
}
/**
 * 读取签名
 * @return
 */
def getSignProperty() {
    def Properties buildProperties =new Properties()
    buildProperties.load(new FileInputStream(file('../config/sign.properties')))
    return buildProperties
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.bolesky.base"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        // dex突破65535的限制
        multiDexEnabled true
        // AndroidManifest.xml 里面UMENG_CHANNEL的value为 ${UMENG_CHANNEL_VALUE}
        //默认的渠道名
        manifestPlaceholders = [CHANNEL: "Xiaomi"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，可以将其关掉。
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    //签名
    signingConfigs {
        debug {
            // No debug config
        }
        release {
            def Properties buildSignProps = getSignProperty()
            storeFile file(buildSignProps['STORE_FILE'])
            keyAlias buildSignProps['KEY_ALIAS']
            keyPassword buildSignProps['KEY_PASSWORD']
            storePassword buildSignProps['STORE_PASSWORD']
        }
    }
    buildTypes {

        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            versionNameSuffix "-release"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
//            shrinkResources true
            //混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        productFlavors {
            baidu {
                manifestPlaceholders = [CHANNEL_ID: "baidu"]
            }
            googleplay {
                manifestPlaceholders = [CHANNEL_ID: "google"]
            }
            wandoujia {
                manifestPlaceholders = [CHANNEL_ID: "wandoujia"]
            }
            xiaomi {
                manifestPlaceholders = [CHANNEL_ID: "xiaomi"]
            }
            yingyongbao {
                manifestPlaceholders = [ CHANNEL_ID:"yingyongbao"]
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                // 重命名产出的apk文件
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    File outputDirectory = new File(outputFile.parent);
                    def fileName
                    if (variant.buildType.name == "release") {// 输出apk名称为App_v1.0_2015-01-15_release_wandoujia.apk
                        fileName = "app_v${defaultConfig.versionName}_${buildTime("yyyy-MMdd")}_release_${variant.productFlavors[0].name}.apk"
                    } else {
                        fileName = "app_v${defaultConfig.versionName}_${buildTime("yyyy-MMdd")}_debug_${variant.productFlavors[0].name}.apk"
                    }
                    output.outputFile = new File(outputDirectory, fileName)
                }
            }
        }
    }

    // 注释冲突
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:design:25.0.0'
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:support-v4:25.0.0'
    testCompile 'junit:junit:4.12'
    //Dagger2
    apt 'com.google.dagger:dagger-compiler:2.7'
    compile 'com.google.dagger:dagger:2.7'
    compile 'com.jakewharton:butterknife:7.0.1'
    //第三方库
    compile project(':progressLibrary')
    compile project(':refreshLibrary')
    compile project(':tabnavigatorLibrary')
    //retrofit2+java
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'io.reactivex:rxandroid:1.2.1'
    //动画库
    compile 'com.nineoldandroids:library:2.4.0'
    //图片加载库
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    provided 'org.glassfish:javax.annotation:10.0-b28'

}
